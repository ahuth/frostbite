{"version":3,"sources":["components/Action/Action.module.css","components/Progress/Progress.module.css","components/Progress/index.ts","components/Progress/Progress.tsx","components/Action/index.ts","components/Action/Action.tsx","components/Inventory.tsx","hooks/useIncrement.ts","components/App.tsx","index.ts","hooks/useLadder.ts"],"names":["module","exports","base","button","inverted","bar","Progress","_ref","active","time","barStyles","useMemo","transition","concat","width","react_default","a","createElement","className","styles","style","Action","cooldown","_ref$inverted","onClick","text","_useState","useState","_useState2","Object","slicedToArray","disabled","setDisabled","useEffect","id","window","setTimeout","clearTimeout","components_Progress","Inventory","huts","wood","useIncrement","initial","arguments","length","undefined","interval","state","setState","useCallback","val","backgroundColors","ReactDOM","render","React","_useLadder","values","index","setIndex","raise","current","next","Math","min","lower","max","useLadder","_useLadder2","fire","raiseFire","lowerFire","_useIncrement","_useIncrement2","addHut","_useIncrement3","_useIncrement4","addWood","backgroundStyles","backgroundColor","components_Action","document","getElementById"],"mappings":"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","file":"static/js/main.39702a25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"base\":\"Action_base__b0hSW\",\"button\":\"Action_button__3zgjE Action_base__b0hSW\",\"inverted\":\"Action_inverted__3xPbq Action_base__b0hSW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"Progress_bar__2W2SF\"};","import Progress from './Progress';\n\nexport default Progress;\n","import React, { useMemo } from 'react';\nimport styles from './Progress.module.css';\n\ntype Props = {\n  active: boolean,\n  time: number,\n};\n\nexport default function Progress({ active, time }: Props) {\n  const barStyles = useMemo(() => {\n    return {\n      transition: active ? `width ${time}ms linear` : 'none',\n      width: active ? 0 : '100%',\n    };\n  }, [active, time]);\n\n  return (\n    <div>\n      <span className={styles.bar} style={barStyles} />\n    </div>\n  );\n}\n","import Action from './Action';\n\nexport default Action;\n","import React, { useEffect, useState } from 'react';\nimport Progress from '../Progress';\nimport styles from './Action.module.css';\n\ntype Props = {\n  cooldown: number,\n  inverted?: boolean,\n  onClick: () => void,\n  text: string,\n};\n\nexport default function Action({ cooldown, inverted = false, onClick, text }: Props) {\n  const [disabled, setDisabled] = useState(false);\n\n  function handleClick() {\n    onClick();\n    setDisabled(true);\n  }\n\n  useEffect(() => {\n    if (disabled) {\n      const id = window.setTimeout(() => setDisabled(false), cooldown);\n      return () => window.clearTimeout(id);\n    }\n  }, [cooldown, disabled]);\n\n  return (\n    <button className={inverted ? styles.inverted : styles.button} disabled={disabled} onClick={handleClick}>\n      {text}\n      <Progress active={disabled} time={cooldown} />\n    </button>\n  );\n}\n","import React from 'react';\n\ntype Props = {\n  huts: number,\n  wood: number;\n};\n\nexport default function Inventory({ huts, wood }: Props) {\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <td>Wood</td>\n          <td>{wood}</td>\n        </tr>\n        <tr>\n          <td>Huts</td>\n          <td>{huts}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n","import { useCallback, useState } from 'react';\n\nexport default function useIncrement(initial = 0, interval = 1): [number, () => void] {\n  const [state, setState] = useState(initial);\n  const add = useCallback(() => setState(val => val + interval), [interval]);\n  return [state, add];\n}\n","import React, { useEffect, useMemo } from 'react';\nimport Action from './Action';\nimport Inventory from './Inventory';\nimport useIncrement from '../hooks/useIncrement';\nimport useLadder from '../hooks/useLadder';\n\nconst backgroundColors = ['black', 'darkGray', 'white'];\n\nexport default function App() {\n  const [fire, raiseFire, lowerFire] = useLadder([0, 1, 2]);\n  const [huts, addHut] = useIncrement(0, 1);\n  const [wood, addWood] = useIncrement(0, 1);\n\n  const backgroundStyles = useMemo(() => {\n    return {\n      backgroundColor: backgroundColors[fire],\n    };\n  }, [fire]);\n\n  useEffect(() => {\n    const id = window.setTimeout(lowerFire, 25000);\n    return () => window.clearTimeout(id);\n  }, [fire, lowerFire]);\n\n  return (\n    <div style={backgroundStyles}>\n      <Action cooldown={10000} inverted={fire === 0} onClick={raiseFire} text=\"Stoke fire\" />\n      <Action cooldown={2000} onClick={addWood} text=\"Gather wood\" />\n      <Action cooldown={5000} onClick={addHut} text=\"Build hut\" />\n      <Inventory huts={huts} wood={wood} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n","import { useCallback, useState } from 'react';\n\nexport default function useLadder<T>(values: Array<T>): [T, () => void, () => void] {\n  const [index, setIndex] = useState(0);\n\n  const raise = useCallback(() => {\n    setIndex((current) => {\n      const next = current + 1;\n      return Math.min(next, values.length - 1);\n    });\n  }, [values.length]);\n\n  const lower = useCallback(() => {\n    setIndex((current) => {\n      const next = current - 1;\n      return Math.max(next, 0);\n    });\n  }, []);\n\n  return [values[index], raise, lower];\n}\n"],"sourceRoot":""}